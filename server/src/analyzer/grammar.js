/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,25],$V7=[1,34],$V8=[1,26],$V9=[1,27],$Va=[1,38],$Vb=[1,28],$Vc=[1,35],$Vd=[1,39],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,36],$Vi=[1,37],$Vj=[1,71],$Vk=[1,53],$Vl=[1,61],$Vm=[1,60],$Vn=[1,70],$Vo=[1,65],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[2,75],$Vx=[5,14,15,23,29,31,32,38,39,43,44,51,66,68,70,71,74,81,82,86,90,112,113],$Vy=[1,110],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[1,108],$VI=[1,107],$VJ=[1,109],$VK=[1,111],$VL=[7,26,28,53,54,55,56,57,67,68,77,78,95,96,97,98,99,100,101,103,104,105,106],$VM=[2,77],$VN=[7,26,28,53,54,55,56,57,67,68,70,71,77,78,95,96,97,98,99,100,101,103,104,105,106],$VO=[1,119],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,128],$VW=[7,28],$VX=[2,41],$VY=[1,132],$VZ=[7,26,28,53,54,56,67,68,77,78,100,101],$V_=[1,169],$V$=[2,47],$V01=[7,28,56,77,91],$V11=[55,57,95,96,97,98,99,100,101,103,104,105,106],$V21=[1,186],$V31=[7,26,28,53,54,56,57,67,68,77,78,95,96,97,98,99,100,101],$V41=[7,26,28,53,54,56,57,67,68,77,78,95,96,97,98,99,100,101,103,104,106],$V51=[1,202],$V61=[28,56],$V71=[1,216],$V81=[71,78],$V91=[41,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"TK_SCOLON":7,"ddl":8,"dml":9,"if_struct":10,"case_struct":11,"while_struct":12,"for_struct":13,"RW_BREAK":14,"RW_CONTINUE":15,"declare_function":16,"declare_method":17,"declare_var":18,"set_var":19,"encapsulated":20,"cast":21,"print":22,"RW_CREATE":23,"RW_TABLE":24,"TK_ID":25,"TK_LPAR":26,"typed_arguments":27,"TK_RPAR":28,"RW_ALTER":29,"alter_actions":30,"RW_DROP":31,"RW_INSERT":32,"RW_INTO":33,"arguments":34,"RW_VALUES":35,"value_arguments":36,"select_stmt":37,"RW_UPDATE":38,"RW_SET":39,"set_arguments":40,"RW_WHERE":41,"expression":42,"RW_TRUNCATE":43,"RW_DELETE":44,"RW_FROM":45,"RW_ADD":46,"type":47,"RW_COLUMN":48,"RW_RENAME":49,"RW_TO":50,"RW_SELECT":51,"select_arguments":52,"FROM":53,"AS":54,"TK_STAR":55,"TK_COMA":56,"TK_EQ":57,"typed_var_arguments":58,"TK_VAR":59,"RW_INT":60,"RW_VARCHAR":61,"RW_DOUBLE":62,"RW_DATE":63,"RW_BOOLEAN":64,"RW_NULL":65,"RW_IF":66,"RW_THEN":67,"RW_BEGIN":68,"env":69,"RW_END":70,"RW_ELSE":71,"simple_case":72,"searched_case":73,"RW_CASE":74,"simple_case_cases":75,"primitive":76,"RW_AS":77,"RW_WHEN":78,"searched_case_cases":79,"relational":80,"RW_WHILE":81,"RW_FOR":82,"RW_IN":83,"TK_INT":84,"TK_DOT":85,"END":86,"RW_FUNCTION":87,"RETURNS":88,"RW_PROCEDURE":89,"RW_DECLARE":90,"RW_DEFAULT":91,"logic":92,"arithmetic":93,"call_func_mth":94,"TK_GEQ":95,"TK_LEQ":96,"TK_GREATER":97,"TK_LESS":98,"TK_NOTEQ":99,"RW_AND":100,"RW_OR":101,"RW_NOT":102,"TK_MINUS":103,"TK_PLUS":104,"TK_DIV":105,"TK_MOD":106,"TK_VARCHAR":107,"TK_DOUBLE":108,"TK_DATE":109,"RW_TRUE":110,"RW_FALSE":111,"RW_CAST":112,"RW_PRINT":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"TK_SCOLON",14:"RW_BREAK",15:"RW_CONTINUE",23:"RW_CREATE",24:"RW_TABLE",25:"TK_ID",26:"TK_LPAR",28:"TK_RPAR",29:"RW_ALTER",31:"RW_DROP",32:"RW_INSERT",33:"RW_INTO",35:"RW_VALUES",38:"RW_UPDATE",39:"RW_SET",41:"RW_WHERE",43:"RW_TRUNCATE",44:"RW_DELETE",45:"RW_FROM",46:"RW_ADD",48:"RW_COLUMN",49:"RW_RENAME",50:"RW_TO",51:"RW_SELECT",53:"FROM",54:"AS",55:"TK_STAR",56:"TK_COMA",57:"TK_EQ",59:"TK_VAR",60:"RW_INT",61:"RW_VARCHAR",62:"RW_DOUBLE",63:"RW_DATE",64:"RW_BOOLEAN",65:"RW_NULL",66:"RW_IF",67:"RW_THEN",68:"RW_BEGIN",70:"RW_END",71:"RW_ELSE",74:"RW_CASE",77:"RW_AS",78:"RW_WHEN",81:"RW_WHILE",82:"RW_FOR",83:"RW_IN",84:"TK_INT",85:"TK_DOT",86:"END",87:"RW_FUNCTION",88:"RETURNS",89:"RW_PROCEDURE",90:"RW_DECLARE",91:"RW_DEFAULT",95:"TK_GEQ",96:"TK_LEQ",97:"TK_GREATER",98:"TK_LESS",99:"TK_NOTEQ",100:"RW_AND",101:"RW_OR",102:"RW_NOT",103:"TK_MINUS",104:"TK_PLUS",105:"TK_DIV",106:"TK_MOD",107:"TK_VARCHAR",108:"TK_DOUBLE",109:"TK_DATE",110:"RW_TRUE",111:"RW_FALSE",112:"RW_CAST",113:"RW_PRINT"},
productions_: [0,[3,2],[3,1],[4,3],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,6],[8,4],[8,3],[9,10],[9,1],[9,6],[9,3],[9,5],[30,3],[30,3],[30,3],[30,5],[37,4],[37,6],[37,4],[37,2],[52,1],[52,1],[40,5],[40,3],[36,3],[36,1],[34,3],[34,1],[27,4],[27,2],[58,4],[58,2],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[10,6],[10,8],[11,1],[11,1],[72,6],[72,8],[75,5],[75,4],[73,5],[73,7],[79,5],[79,4],[12,5],[13,11],[20,3],[16,11],[17,8],[18,2],[18,5],[19,4],[69,1],[69,0],[42,3],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,3],[80,3],[80,3],[80,3],[80,3],[80,3],[80,3],[92,3],[92,3],[92,2],[93,2],[93,3],[93,3],[93,3],[93,3],[93,3],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[94,4],[21,6],[22,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return null 
break;
case 3:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 4:
 this.$ = [$$[$0-1]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 24: case 77: case 78: case 79: case 80: case 81: case 82: case 83:
 this.$ = $$[$0]; 
break;
case 20: case 21: case 22: case 23: case 25: case 26: case 27:
  
break;
case 44: case 46:
 $$[$0-3].push({id: $$[$0-1], type: $$[$0]}); this.$ = $$[$0-3]; 
break;
case 45:
 this.$ = $$[$0-1] == null ? [{}] : [{id: $$[$0-1], type: $$[$0]}]; 
break;
case 47:
 this.$ = [{id: $$[$0-1], type: $$[$0]}];
break;
case 71:
 this.$ = new Declaration($$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 72:
 this.$ = new Declaration([{id: $$[$0-3], type: $$[$0-2]}], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 76:
 this.$ = $$[$0-1]; 
break;
case 84:
 this.$ = $$[$0-2]; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi},{1:[3]},{5:[1,40],6:41,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi},{1:[2,2]},{7:[1,42]},{7:[2,5]},{7:[2,6]},{7:[2,7]},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[2,14]},{7:[2,15]},{7:[2,16]},{7:[2,17]},{7:[2,18]},{7:[2,19]},{24:[1,43],87:[1,44],89:[1,45]},{24:[1,46]},{24:[1,47]},{33:[1,48]},{7:[2,24]},{25:[1,49]},{24:[1,50]},{45:[1,51]},{21:59,25:$Vj,26:$Vk,28:$Vl,42:52,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{7:[2,56]},{7:[2,57]},{21:59,25:$Vj,26:$Vk,28:$Vl,42:72,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{25:[1,73]},{58:74,59:[1,75]},{59:[1,76]},{4:78,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,69:77,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,86:$Vw,90:$Vg,112:$Vh,113:$Vi},{26:[1,79]},{21:59,25:$Vj,26:$Vk,28:$Vl,42:80,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,36:84,42:82,52:81,55:[1,83],59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:85,59:$Vm,65:$Vn,76:57,78:[1,87],79:86,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{1:[2,1]},{7:[1,88]},o($Vx,[2,4]),{25:[1,89]},{25:[1,90]},{25:[1,91]},{25:[1,92]},{25:[1,93]},{25:[1,94]},{39:[1,95]},{25:[1,96]},{25:[1,97]},{55:$Vy,57:$Vz,67:[1,98],95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{37:112,51:$Va},o($VL,$VM),o($VL,[2,78]),o($VL,[2,79]),o($VL,[2,80]),o($VL,[2,81]),o($VL,[2,82]),o($VL,[2,83]),{21:59,25:$Vj,26:$Vk,28:$Vl,42:113,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:114,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:115,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},o($VN,[2,100]),o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($VN,[2,104]),o($VN,[2,105]),o($VN,[2,106]),{26:[1,116]},{55:$Vy,57:$Vz,68:[1,117],95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{83:[1,118]},{7:[2,71],56:$VO},{47:120,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU},{57:[1,127]},{86:$VV},o([70,71,86],[2,74],{8:5,9:6,10:7,11:8,12:9,13:10,16:13,17:14,18:15,19:16,20:17,21:18,22:19,37:24,72:29,73:30,6:41,14:$V0,15:$V1,23:$V2,29:$V3,31:$V4,32:$V5,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi}),{21:59,25:$Vj,26:$Vk,28:$Vl,42:129,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{7:[2,109],55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{53:[1,130]},o($VW,[2,35],{53:$VX,56:$VX,54:[1,131],55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK}),{53:[2,36]},{53:[2,37],56:$VY},{55:$Vy,57:$Vz,75:133,78:[1,134],95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{71:[1,135],78:[1,136]},{21:59,25:$Vj,26:$Vk,28:$Vl,42:138,59:$Vm,65:$Vn,76:57,80:137,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},o($Vx,[2,3]),{26:[1,139]},{26:[1,140]},{58:141,59:[1,142]},{30:143,31:[1,145],46:[1,144],49:[1,146]},{7:[2,22]},{26:[1,147]},{25:[1,149],40:148},{7:[2,26]},{41:[1,150]},{4:78,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:[1,151],69:152,71:$Vw,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi},{21:59,25:$Vj,26:$Vk,28:$Vl,42:153,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:154,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:155,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:156,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:157,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:158,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:159,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:160,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:161,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:162,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:163,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:164,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{21:59,25:$Vj,26:$Vk,28:$Vl,42:165,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{28:[1,166]},{26:[1,167],55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},o($VZ,[2,93],{55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,103:$VH,104:$VI,105:$VJ,106:$VK}),o($VL,[2,94]),{25:$V_,34:168},{4:78,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,69:170,70:$Vw,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi},{84:[1,171]},{59:[1,172]},o([7,56],$V$,{91:[1,173]}),o($V01,[2,48]),o($V01,[2,49]),o($V01,[2,50]),o($V01,[2,51]),o($V01,[2,52]),o($V01,[2,53]),{21:59,25:$Vj,26:$Vk,28:$Vl,42:174,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{7:[2,68]},{55:$Vy,57:$Vz,77:[1,175],95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{25:[1,176]},{25:[1,177]},{21:59,25:$Vj,26:$Vk,28:$Vl,42:178,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{71:[1,179],78:[1,180]},{65:$Vn,76:181,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{65:$Vn,76:182,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{21:59,25:$Vj,26:$Vk,28:$Vl,42:138,59:$Vm,65:$Vn,76:57,80:183,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},o($V11,$VM,{67:[1,184]}),{55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{25:$V21,27:185},{25:$V21,27:187},{56:$VO,77:[1,188]},{47:189,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU},{7:[2,21]},{25:[1,190]},{48:[1,191]},{48:[1,193],50:[1,192]},{25:$V_,34:194},{41:[1,195],56:[1,196]},{57:[1,197]},{21:59,25:$Vj,26:$Vk,28:$Vl,42:198,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},o([70,86],$Vw,{6:4,8:5,9:6,10:7,11:8,12:9,13:10,16:13,17:14,18:15,19:16,20:17,21:18,22:19,37:24,72:29,73:30,4:78,69:199,14:$V0,15:$V1,23:$V2,29:$V3,31:$V4,32:$V5,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi}),{71:[1,200]},o($V31,[2,85],{55:$Vy,103:$VH,104:$VI,105:$VJ,106:$VK}),o($V31,[2,86],{55:$Vy,103:$VH,104:$VI,105:$VJ,106:$VK}),o($V31,[2,87],{55:$Vy,103:$VH,104:$VI,105:$VJ,106:$VK}),o($V31,[2,88],{55:$Vy,103:$VH,104:$VI,105:$VJ,106:$VK}),o($V31,[2,89],{55:$Vy,103:$VH,104:$VI,105:$VJ,106:$VK}),o($V31,[2,90],{55:$Vy,103:$VH,104:$VI,105:$VJ,106:$VK}),o($VZ,[2,91],{55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,103:$VH,104:$VI,105:$VJ,106:$VK}),o([7,26,28,53,54,56,67,68,77,78,101],[2,92],{55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,103:$VH,104:$VI,105:$VJ,106:$VK}),o($V41,[2,95],{55:$Vy,105:$VJ}),o($V41,[2,96],{55:$Vy,105:$VJ}),o($VL,[2,97]),o($VL,[2,98]),o($V41,[2,99],{55:$Vy,105:$VJ}),o($VL,[2,76]),o($VL,[2,84]),{28:[1,201],56:$V51},o($V61,[2,43]),{70:[1,203]},{85:[1,204]},{47:205,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU},{21:59,25:$Vj,26:$Vk,28:$Vl,42:206,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{7:[2,73],55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{47:207,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU},o($VW,[2,32],{41:[1,208]}),o($VW,[2,34]),o([28,53,56],[2,40],{55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK}),{65:$Vn,76:209,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{65:$Vn,76:210,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{67:[1,211]},{70:[1,212]},o($V11,$VM,{67:[1,213]}),{65:$Vn,76:214,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{28:[1,215],56:$V71},{47:217,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU},{28:[1,218],56:$V71},{68:[1,219]},o([56,77],$V$),{47:220,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU},{25:[1,221]},{25:[1,222]},{25:[1,223]},{28:[1,224],56:$V51},{21:59,25:$Vj,26:$Vk,28:$Vl,42:225,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{25:[1,226]},{25:[1,227]},{7:[2,27],55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{70:[1,228],86:$VV},{4:78,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,69:229,70:$Vw,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi},o($VL,[2,107]),{25:[1,230]},{7:[2,66]},{85:[1,231]},o([7,56,77],[2,46]),{7:[2,72],55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{28:[1,232]},{21:59,25:$Vj,26:$Vk,28:$Vl,42:233,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},{70:[1,234]},{67:[1,235]},{65:$Vn,76:236,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{7:[2,62],77:[1,237]},{65:$Vn,76:238,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($V81,[2,65]),{7:[2,20]},{25:[1,239]},o($V61,[2,45]),{88:[1,240]},{4:78,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,69:241,70:$Vw,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi},{7:[2,28]},{7:[2,29]},{7:[2,30]},{50:[1,242]},{35:[1,243]},{7:[2,25],55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK},{57:[1,244]},o($V91,[2,39]),{7:[2,54]},{70:[1,245]},o($V61,[2,42]),{85:[1,246]},o($VL,[2,108]),o($VW,[2,33],{55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK}),{7:[2,58],77:[1,247]},{65:$Vn,76:248,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($V81,[2,61]),{25:[1,249]},o($V81,[2,64]),{47:250,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU},{65:$Vn,76:251,84:$Vo,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{70:[1,252]},{25:[1,253]},{28:[1,254]},{25:[1,255]},{66:[1,256]},{84:[1,257]},{25:[1,258]},o($V81,[2,60]),{7:[2,63]},o($V61,[2,44]),{68:[1,259]},{7:[2,70]},{7:[2,31]},{21:59,25:$Vj,26:$Vk,28:$Vl,36:260,42:261,59:$Vm,65:$Vn,76:57,80:54,84:$Vo,92:55,93:56,94:58,102:$Vp,103:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vh},o($V91,[2,38]),{7:[2,55]},{68:[1,262]},{7:[2,59]},{4:78,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,69:263,70:$Vw,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi},{28:[1,264],56:$VY},o($V61,$VX,{55:$Vy,57:$Vz,95:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,103:$VH,104:$VI,105:$VJ,106:$VK}),{4:78,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,29:$V3,31:$V4,32:$V5,37:24,38:$V6,39:$V7,43:$V8,44:$V9,51:$Va,66:$Vb,68:$Vc,69:265,70:$Vw,72:29,73:30,74:$Vd,81:$Ve,82:$Vf,90:$Vg,112:$Vh,113:$Vi},{70:[1,266]},{7:[2,23]},{70:[1,267]},{7:[2,69]},{7:[2,67]}],
defaultActions: {3:[2,2],5:[2,5],6:[2,6],7:[2,7],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],17:[2,17],18:[2,18],19:[2,19],24:[2,24],29:[2,56],30:[2,57],40:[2,1],83:[2,36],93:[2,22],96:[2,26],128:[2,68],143:[2,21],203:[2,66],215:[2,20],220:[2,28],221:[2,29],222:[2,30],228:[2,54],249:[2,63],252:[2,70],253:[2,31],256:[2,55],258:[2,59],264:[2,23],266:[2,69],267:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // files to import should be the js files
    /*
    import { LexError, SynError } from "./errors.js" 
    */
    // use this import while testing
    const { LexError, SynError } = require("./errors");
    const { Declaration } = require("./instructions/declaration");
    const { Primitive } = require("./tools/types.ts");

    let ast = [];
    let errors = [];
    let lexErrors = [];
    let synErrors = [];
    const clean_errors = () => {
        errors = [];
    }


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// spaces ignored
break;
case 1:// comment inline
break;
case 2:// MultiLineComment
break;
case 3:return "RW_CREATE";
break;
case 4:return "RW_ALTER";
break;
case 5:return "RW_DROP";
break;
case 6:return "RW_RENAME";
break;
case 7:return "RW_INSERT";
break;
case 8:return "RW_UPDATE";
break;
case 9:return "RW_TRUNCATE";
break;
case 10:return "RW_DELETE";
break;
case 11:return "RW_SELECT";
break;
case 12:return "RW_FROM";
break;
case 13:return "RW_WHERE";
break;
case 14:return "RW_INTO";
break;
case 15:return "RW_VALUES";
break;
case 16:return "RW_ADD";
break;
case 17:return "RW_COLUMN";
break;
case 18:return "RW_RENAME";
break;
case 19:return "RW_TO";
break;
case 20:return "RW_TABLE";
break;
case 21:return "RW_INT";
break;
case 22:return "RW_DOUBLE";
break;
case 23:return "RW_DATE";
break;
case 24:return "RW_VARCHAR";
break;
case 25:return "RW_BOOLEAN";
break;
case 26:return "RW_TRUE";
break;
case 27:return "RW_FALSE";
break;
case 28:return "RW_NULL";
break;
case 29:return "RW_NOT"; 
break;
case 30:return "RW_AND";
break;
case 31:return "RW_OR";
break;
case 32:return "RW_BEGIN";
break;
case 33:return "RW_END";
break;
case 34:return "RW_DECLARE";
break;
case 35:return "RW_DEFAULT";
break;
case 36:return "RW_SET";
break;
case 37:return "RW_AS";
break;
case 38:return "RW_CAST";
break;
case 39:return "RW_PRINT";
break;
case 40:return "RW_IF";
break;
case 41:return "RW_THEN";
break;
case 42:return "RW_ELSE";
break;
case 43:return "RW_CASE";
break;
case 44:return "RW_WHEN";
break;
case 45:return "RW_WHILE";
break;
case 46:return "RW_FOR";
break;
case 47:return "RW_IN";
break;
case 48:return "RW_BREAK";
break;
case 49:return "RW_CONTINUE";
break;
case 50:return "RW_FUNCTION";
break;
case 51:return "RW_PROCEDURE";
break;
case 52:return "RW_RETURNS";
break;
case 53:return "RW_RETURN";
break;
case 54:return "TK_LPAR";
break;
case 55:return "TK_RPAR";
break;
case 56:return "TK_SCOLON";
break;
case 57:return "TK_DOT";
break;
case 58:return "TK_COMA";
break;
case 59:return "TK_PLUS";
break;
case 60:return "TK_MINUS";
break;
case 61:return "TK_STAR";
break;
case 62:return "TK_DIV";
break;
case 63:return "TK_MOD";
break;
case 64:return "TK_GEQ";
break;
case 65:return "TK_LEQ";
break;
case 66:return "TK_EQEQ";
break;
case 67:return "TK_NOTEQ";
break;
case 68:return "TK_GREATER";
break;
case 69:return "TK_LESS";
break;
case 70:return "TK_EQ";
break;
case 71:return "TK_VARCHAR";
break;
case 72:return "TK_VARCHAR";
break;
case 73:return "TK_VARCHAR";
break;
case 74:return "TK_VARCHAR";
break;
case 75:return "TK_INT";
break;
case 76:return "TK_DOUBLE";
break;
case 77:return "TK_DATE";
break;
case 78:return "TK_ID";
break;
case 79:return "TK_VAR";
break;
case 80:return 5;
break;
case 81: lexErrors.push(new LexError(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext)); return "INVALID"; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:CREATE\b)/i,/^(?:ALTER\b)/i,/^(?:DROP\b)/i,/^(?:RENAME\b)/i,/^(?:INSERT\b)/i,/^(?:UPDATE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:DELETE\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:ADD\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:TABLE\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:DATE\b)/i,/^(?:VARCHAR\b)/i,/^(?:BOOLEAN\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:NOT\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:SET\b)/i,/^(?:AS\b)/i,/^(?:CAST\b)/i,/^(?:PRINT\b)/i,/^(?:IF\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:FUNCTION\b)/i,/^(?:PROCEDURE\b)/i,/^(?:RETURNS\b)/i,/^(?:RETURN\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:[ \r\t]+\n"[^\"]*")/i,/^(?:'[^\"]*')/i,/^(?:'(([^\n\"\\]|\\.)*)')/i,/^(?:"(([^\n\"\\]|\\.)*)")/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:^\d{4}(0[1-9]|1[0-2])([0-2]\d|3[01])$)/i,/^(?:(_)*[a-zA-ZñÑ][a-zA-Z0-9ñÑ\_]*)/i,/^(?:@(_)*[a-zA-ZñÑ][a-zA-Z0-9ñÑ\_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}