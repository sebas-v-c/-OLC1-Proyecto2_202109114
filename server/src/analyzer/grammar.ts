import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

    // files to import should be the js files
    /*
    import { LexError, SynError } from "./errors.js" 
    */
    // use this import while testing
    const { LexError, SynError } = require("./errors");

    let ast = [];
    let errors = [];
    let lexErrors = [];
    let synErrors = [];
    const clean_errors = () => {
        errors = [];
    }
    let controlString = "";


    // files to import should be the js files
    /*
    import { LexError, SynError } from "./errors.js" 
    */
    // use this import while testing
    const { Declaration } = require("./instructions/declaration");
    const { SetVar } = require("./instructions/setVar");
    const { If } = require("./instructions/if");
    const { SimpleCase, SearchedCase } = require("./instructions/case");
    const { Function, Method } = require("./instructions/function");
    const { For } = require("./instructions/for");
    const { Continue } = require("./instructions/continue");
    const { Break } = require("./instructions/break");
    const { Return } = require("./instructions/return");
    const { While } = require("./instructions/while");
    const { Print } = require("./instructions/print");
    const { CodeBlock } = require("./instructions/codeBlock");

    const { Create } = require("./instructions/ddl/create");
    const { Alter, AlterActions } = require("./instructions/ddl/alter");
    const { Drop } = require("./instructions/ddl/drop");

    const { Primitive, RelationalOperator, ArithmeticOperator, LogicalOperator } = require("./tools/types");
    const { PrimitiveVar } = require("./expressions/primitive");
    const { Logical } = require("./expressions/logical");
    const { Relational } = require("./expressions/relational");
    const { Arithmetic } = require("./expressions/arithmetic");
    const { CallVar } = require("./expressions/callVar");
    const { CallFunc } = require("./expressions/callFunc");

export class QCrypterParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"TK_SCOLON":7,"ddl":8,"dml":9,"if_struct":10,"case_struct":11,"while_struct":12,"for_struct":13,"RW_BREAK":14,"RW_CONTINUE":15,"RW_RETURN":16,"expression":17,"call_func_mth":18,"declare_function":19,"declare_method":20,"declare_var":21,"set_var":22,"encapsulated":23,"cast":24,"print":25,"RW_CREATE":26,"RW_TABLE":27,"TK_ID":28,"TK_LPAR":29,"typed_arguments":30,"TK_RPAR":31,"RW_ALTER":32,"alter_actions":33,"RW_DROP":34,"RW_INSERT":35,"RW_INTO":36,"arguments":37,"RW_VALUES":38,"value_arguments":39,"select_stmt":40,"RW_UPDATE":41,"RW_SET":42,"set_arguments":43,"RW_WHERE":44,"RW_TRUNCATE":45,"RW_DELETE":46,"RW_FROM":47,"RW_ADD":48,"type":49,"RW_COLUMN":50,"RW_RENAME":51,"RW_TO":52,"RW_SELECT":53,"select_arguments":54,"FROM":55,"AS":56,"TK_STAR":57,"TK_COMA":58,"TK_EQ":59,"typed_var_arguments":60,"TK_VAR":61,"RW_INT":62,"RW_VARCHAR":63,"RW_DOUBLE":64,"RW_DATE":65,"RW_BOOLEAN":66,"RW_NULL":67,"RW_IF":68,"RW_THEN":69,"env":70,"RW_ELSE":71,"RW_END":72,"RW_BEGIN":73,"searched_case":74,"simple_case":75,"RW_CASE":76,"simple_case_cases":77,"primitive":78,"RW_AS":79,"RW_WHEN":80,"searched_case_cases":81,"RW_WHILE":82,"RW_FOR":83,"RW_IN":84,"TK_INT":85,"TK_DOT":86,"RW_LOOP":87,"END":88,"RW_FUNCTION":89,"RW_RETURNS":90,"RW_PROCEDURE":91,"RW_DECLARE":92,"RW_DEFAULT":93,"logic":94,"relational":95,"arithmetic":96,"TK_GEQ":97,"TK_LEQ":98,"TK_GREATER":99,"TK_LESS":100,"TK_NOTEQ":101,"RW_AND":102,"RW_OR":103,"RW_NOT":104,"TK_DOUBLE":105,"TK_DATE":106,"TK_VARCHAR":107,"RW_TRUE":108,"RW_FALSE":109,"TK_PLUS":110,"TK_MINUS":111,"TK_DIV":112,"TK_MOD":113,"RW_CAST":114,"RW_PRINT":115,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",7:"TK_SCOLON",14:"RW_BREAK",15:"RW_CONTINUE",16:"RW_RETURN",26:"RW_CREATE",27:"RW_TABLE",28:"TK_ID",29:"TK_LPAR",31:"TK_RPAR",32:"RW_ALTER",34:"RW_DROP",35:"RW_INSERT",36:"RW_INTO",38:"RW_VALUES",41:"RW_UPDATE",42:"RW_SET",44:"RW_WHERE",45:"RW_TRUNCATE",46:"RW_DELETE",47:"RW_FROM",48:"RW_ADD",50:"RW_COLUMN",51:"RW_RENAME",52:"RW_TO",53:"RW_SELECT",55:"FROM",56:"AS",57:"TK_STAR",58:"TK_COMA",59:"TK_EQ",61:"TK_VAR",62:"RW_INT",63:"RW_VARCHAR",64:"RW_DOUBLE",65:"RW_DATE",66:"RW_BOOLEAN",67:"RW_NULL",68:"RW_IF",69:"RW_THEN",71:"RW_ELSE",72:"RW_END",73:"RW_BEGIN",76:"RW_CASE",79:"RW_AS",80:"RW_WHEN",82:"RW_WHILE",83:"RW_FOR",84:"RW_IN",85:"TK_INT",86:"TK_DOT",87:"RW_LOOP",88:"END",89:"RW_FUNCTION",90:"RW_RETURNS",91:"RW_PROCEDURE",92:"RW_DECLARE",93:"RW_DEFAULT",97:"TK_GEQ",98:"TK_LEQ",99:"TK_GREATER",100:"TK_LESS",101:"TK_NOTEQ",102:"RW_AND",103:"RW_OR",104:"RW_NOT",105:"TK_DOUBLE",106:"TK_DATE",107:"TK_VARCHAR",108:"RW_TRUE",109:"RW_FALSE",110:"TK_PLUS",111:"TK_MINUS",112:"TK_DIV",113:"TK_MOD",114:"RW_CAST",115:"RW_PRINT"};
    productions_: ProductionsType = [0,[3,2],[3,1],[4,3],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,6],[8,4],[8,3],[9,10],[9,1],[9,6],[9,3],[9,5],[33,3],[33,3],[33,3],[33,5],[40,4],[40,6],[40,4],[40,2],[54,1],[54,1],[43,5],[43,3],[39,3],[39,1],[37,3],[37,1],[30,4],[30,2],[60,4],[60,2],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[10,8],[10,6],[11,1],[11,1],[75,6],[75,8],[77,5],[77,4],[74,5],[74,7],[81,5],[81,4],[12,5],[13,11],[23,3],[19,11],[20,8],[21,2],[21,5],[22,4],[70,1],[70,0],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[17,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[94,3],[94,3],[94,2],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[96,3],[96,3],[96,3],[96,3],[96,3],[96,2],[18,4],[24,6],[25,2]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {3:[2,2],5:[2,5],6:[2,6],7:[2,7],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],14:[2,15],15:[2,16],16:[2,17],17:[2,18],18:[2,19],19:[2,20],20:[2,21],21:[2,22],26:[2,27],31:[2,59],32:[2,60],43:[2,1],86:[2,39],113:[2,25],116:[2,29],132:[2,71],161:[2,24],204:[2,69],216:[2,23],221:[2,31],222:[2,32],223:[2,33],231:[2,58],249:[2,66],254:[2,73],255:[2,34],258:[2,57],260:[2,62],265:[2,26],267:[2,72],268:[2,70]};

    constructor (yy = {}, lexer = new QCrypterLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,11],$V1=[1,12],$V2=[1,13],$V3=[1,22],$V4=[1,35],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,27],$V9=[1,37],$Va=[1,28],$Vb=[1,29],$Vc=[1,41],$Vd=[1,30],$Ve=[1,38],$Vf=[1,42],$Vg=[1,33],$Vh=[1,34],$Vi=[1,36],$Vj=[1,39],$Vk=[1,40],$Vl=[1,54],$Vm=[1,53],$Vn=[1,62],$Vo=[1,56],$Vp=[1,55],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[1,63],$Vw=[2,78],$Vx=[5,14,15,16,26,28,32,34,35,41,42,45,46,53,68,71,72,73,76,82,83,88,92,114,115],$Vy=[1,103],$Vz=[1,94],$VA=[1,95],$VB=[1,96],$VC=[1,97],$VD=[1,98],$VE=[1,99],$VF=[1,92],$VG=[1,93],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,104],$VL=[7,31,55,56,57,58,59,69,73,79,80,97,98,99,100,101,102,103,110,111,112,113],$VM=[7,31,55,56,57,58,59,69,71,72,73,79,80,97,98,99,100,101,102,103,110,111,112,113],$VN=[1,123],$VO=[1,125],$VP=[1,126],$VQ=[1,127],$VR=[1,128],$VS=[1,129],$VT=[1,130],$VU=[1,132],$VV=[7,31],$VW=[2,44],$VX=[1,136],$VY=[7,31,55,56,58,69,73,79,80,102,103],$VZ=[1,160],$V_=[31,58],$V$=[2,50],$V01=[7,31,58,73,79,93],$V11=[7,31,55,56,58,59,69,73,79,80,101,102,103],$V21=[7,31,55,56,58,59,69,73,79,80,97,98,99,100,101,102,103],$V31=[7,31,55,56,58,59,69,73,79,80,97,98,99,100,101,102,103,110,111],$V41=[71,80],$V51=[44,58];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:2,5:[1,3],6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,73:$Ve,74:31,75:32,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk},{1:[3]},{5:[1,43],6:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,73:$Ve,74:31,75:32,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk},{1:[2,2]},{7:[1,45]},{7:[2,5]},{7:[2,6]},{7:[2,7]},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,14],17:46,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{7:[2,15]},{7:[2,16]},{7:[2,17]},{7:[2,18]},{7:[2,19]},{7:[2,20]},{7:[2,21]},{7:[2,22]},{27:[1,64],89:[1,65],91:[1,66]},{27:[1,67]},{27:[1,68]},{36:[1,69]},{7:[2,27]},{28:[1,70]},{27:[1,71]},{47:[1,72]},{17:73,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{7:[2,59]},{7:[2,60]},{17:74,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{61:[1,75]},{29:[1,76]},{60:77,61:[1,78]},{61:[1,79]},{4:81,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,70:80,73:$Ve,74:31,75:32,76:$Vf,82:$Vg,83:$Vh,88:$Vw,92:$Vi,114:$Vj,115:$Vk},{29:[1,82]},{17:83,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:85,18:51,24:52,28:$V4,29:$Vl,39:87,54:84,57:[1,86],61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:89,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,80:[1,90],81:88,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{1:[2,1]},{7:[1,91]},o($Vx,[2,4]),{7:[2,13],57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},o($VL,[2,79]),o($VL,[2,80]),o($VL,[2,81]),o($VL,[2,82]),o($VL,[2,83]),o($VL,[2,84]),o($VL,[2,85]),{17:105,18:51,24:52,28:$V4,29:$Vl,40:106,53:$Vc,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:107,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},o($VM,[2,97]),o($VM,[2,98]),o($VM,[2,99]),o($VM,[2,100]),o($VM,[2,101]),o($VM,[2,102]),o($VM,[2,103]),{17:108,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{28:[1,109]},{28:[1,110]},{28:[1,111]},{28:[1,112]},{28:[1,113]},{28:[1,114]},{42:[1,115]},{28:[1,116]},{28:[1,117]},{57:$Vy,59:$Vz,69:[1,118],97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{57:$Vy,59:$Vz,73:[1,119],97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{84:[1,120]},{17:122,18:51,24:52,28:$V4,29:$Vl,39:121,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{7:[2,74],58:$VN},{49:124,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT},{59:[1,131]},{88:$VU},o([71,72,88],[2,77],{8:5,9:6,10:7,11:8,12:9,13:10,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,40:26,74:31,75:32,6:44,14:$V0,15:$V1,16:$V2,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,73:$Ve,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk}),{17:133,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{7:[2,112],57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{55:[1,134]},o($VV,[2,38],{55:$VW,58:$VW,56:[1,135],57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK}),{55:[2,39]},{55:[2,40],58:$VX},{71:[1,137],80:[1,138]},{57:$Vy,59:$Vz,77:139,80:[1,140],97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{17:141,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},o($Vx,[2,3]),{17:142,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:143,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:144,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:145,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:146,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:147,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:148,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:149,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:150,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:151,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:152,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:153,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{17:154,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{31:[1,155],57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{31:[1,156]},o($VY,[2,96],{57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,110:$VH,111:$VI,112:$VJ,113:$VK}),o($VL,[2,109]),{29:[1,157]},{29:[1,158]},{60:159,61:$VZ},{33:161,34:[1,163],48:[1,162],51:[1,164]},{7:[2,25]},{29:[1,165]},{28:[1,167],43:166},{7:[2,29]},{44:[1,168]},{4:81,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,70:169,71:$Vw,73:[1,170],74:31,75:32,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk},{4:81,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,70:171,72:$Vw,73:$Ve,74:31,75:32,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk},{85:[1,172]},{31:[1,173],58:$VX},o($V_,$VW,{57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK}),{61:[1,174]},o([7,58],$V$,{93:[1,175]}),o($V01,[2,51]),o($V01,[2,52]),o($V01,[2,53]),o($V01,[2,54]),o($V01,[2,55]),o($V01,[2,56]),{17:176,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{7:[2,71]},{57:$Vy,59:$Vz,79:[1,177],97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{28:[1,178]},{28:[1,179]},{17:180,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{67:$Vn,78:181,85:$Vo,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu},{17:182,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{71:[1,183],80:[1,184]},{67:$Vn,78:185,85:$Vo,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu},{57:$Vy,59:$Vz,69:[1,186],97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},o($VY,[2,94],{57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,110:$VH,111:$VI,112:$VJ,113:$VK}),o([7,31,55,56,58,69,73,79,80,103],[2,95],{57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,110:$VH,111:$VI,112:$VJ,113:$VK}),o($V11,[2,88],{57:$Vy,97:$VA,98:$VB,99:$VC,100:$VD,110:$VH,111:$VI,112:$VJ,113:$VK}),o($V21,[2,89],{57:$Vy,110:$VH,111:$VI,112:$VJ,113:$VK}),o($V21,[2,90],{57:$Vy,110:$VH,111:$VI,112:$VJ,113:$VK}),o($V21,[2,91],{57:$Vy,110:$VH,111:$VI,112:$VJ,113:$VK}),o($V21,[2,92],{57:$Vy,110:$VH,111:$VI,112:$VJ,113:$VK}),o($V11,[2,93],{57:$Vy,97:$VA,98:$VB,99:$VC,100:$VD,110:$VH,111:$VI,112:$VJ,113:$VK}),o($V31,[2,104],{57:$Vy,112:$VJ,113:$VK}),o($V31,[2,105],{57:$Vy,112:$VJ,113:$VK}),o($VL,[2,106]),o($VL,[2,107]),o($VL,[2,108]),o($VL,[2,86]),o($VL,[2,87]),{28:[1,188],30:187},{60:189,61:$VZ},{58:$VN,79:[1,190]},{49:191,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT},{7:[2,24]},{28:[1,192]},{50:[1,193]},{50:[1,195],52:[1,194]},{28:[1,197],37:196},{44:[1,198],58:[1,199]},{59:[1,200]},{17:201,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{71:[1,202]},o([72,88],$Vw,{6:4,8:5,9:6,10:7,11:8,12:9,13:10,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,40:26,74:31,75:32,4:81,70:203,14:$V0,15:$V1,16:$V2,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,73:$Ve,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk}),{72:[1,204]},{86:[1,205]},o($VL,[2,110]),{49:206,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT},{17:207,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{7:[2,76],57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{49:208,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT},o($VV,[2,35],{44:[1,209]}),o($VV,[2,37]),o([31,55,58],[2,43],{57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK}),{72:[1,210]},{57:$Vy,59:$Vz,69:[1,211],97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{67:$Vn,78:212,85:$Vo,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu},{67:$Vn,78:213,85:$Vo,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu},{69:[1,214]},{67:$Vn,78:215,85:$Vo,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu},{31:[1,216],58:[1,217]},{49:218,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT},{31:[1,219],58:$VN},{73:[1,220]},o([31,58,79],$V$),{49:221,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT},{28:[1,222]},{28:[1,223]},{28:[1,224]},{31:[1,225],58:[1,226]},o($V_,[2,46]),{17:227,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{28:[1,228]},{28:[1,229]},{7:[2,30],57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{4:81,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,70:230,72:$Vw,73:$Ve,74:31,75:32,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk},{72:[1,231],88:$VU},{7:[2,69]},{86:[1,232]},o([7,31,58,79],[2,49]),{7:[2,75],57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{31:[1,233]},{17:234,18:51,24:52,28:$V4,29:$Vl,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},{7:[2,65],79:[1,235]},{67:$Vn,78:236,85:$Vo,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu},{72:[1,237]},{69:[1,238]},{67:$Vn,78:239,85:$Vo,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu},o($V41,[2,68]),{7:[2,23]},{28:[1,240]},o($V_,[2,48]),{90:[1,241]},{4:81,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,70:242,72:$Vw,73:$Ve,74:31,75:32,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk},{7:[2,31]},{7:[2,32]},{7:[2,33]},{52:[1,243]},{38:[1,244]},{28:[1,245]},{7:[2,28],57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK},{59:[1,246]},o($V51,[2,42]),{72:[1,247]},{7:[2,58]},{85:[1,248]},o($VL,[2,111]),o($VV,[2,36],{57:$Vy,59:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,110:$VH,111:$VI,112:$VJ,113:$VK}),{61:[1,249]},o($V41,[2,67]),{7:[2,61],79:[1,250]},{67:$Vn,78:251,85:$Vo,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu},o($V41,[2,64]),{49:252,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT},{49:253,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT},{72:[1,254]},{28:[1,255]},{31:[1,256]},o($V_,[2,45]),{28:[1,257]},{68:[1,258]},{73:[1,259]},{7:[2,66]},{61:[1,260]},o($V41,[2,63]),o($V_,[2,47]),{73:[1,261]},{7:[2,73]},{7:[2,34]},{17:122,18:51,24:52,28:$V4,29:$Vl,39:262,61:$Vm,67:$Vn,78:49,85:$Vo,94:47,95:48,96:50,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,111:$Vv,114:$Vj},o($V51,[2,41]),{7:[2,57]},{4:81,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,70:263,72:$Vw,73:$Ve,74:31,75:32,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk},{7:[2,62]},{4:81,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,45:$Va,46:$Vb,53:$Vc,68:$Vd,70:264,72:$Vw,73:$Ve,74:31,75:32,76:$Vf,82:$Vg,83:$Vh,92:$Vi,114:$Vj,115:$Vk},{31:[1,265],58:$VX},{72:[1,266]},{72:[1,267]},{7:[2,26]},{87:[1,268]},{7:[2,72]},{7:[2,70]}];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return null 
break;
case 3:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 4:
 this.$ = [$$[$0-1]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 27: case 59: case 60: case 79: case 80: case 81: case 82: case 83: case 84:
 this.$ = $$[$0]; 
break;
case 11:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 12:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 13:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 14:
 this.$ = new Return(undefined, _$[$0].first_line, _$[$0].first_column); 
break;
case 23:
 this.$ = new Create($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 24:
 this.$ = new Alter($$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 25:
 this.$ = new Drop($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 26: case 28: case 29: case 30:
  
break;
case 31:
 this.$ = {type: AlterActions.ADD, col: $$[$0-1], colType: $$[$0]}; 
break;
case 32:
 this.$ = {type: AlterActions.DROP, col: $$[$0]}; 
break;
case 33:
 this.$ = {type: AlterActions.RENAMETABLE, newId: $$[$0]}; 
break;
case 34:
 this.$ = {type: AlterActions.RENAMECOL, col: $$[$0-2], newId: $$[$0]}; 
break;
case 43:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 44:
 this.$ = [$$[$0]]; 
break;
case 47: case 49:
 $$[$0-3].push({id: $$[$0-1], type: $$[$0]}); this.$ = $$[$0-3]; 
break;
case 48:
 this.$ = [{id: $$[$0-1], type: $$[$0]}]; 
break;
case 50:
 this.$ = [{id: $$[$0-1], type: $$[$0]}];
break;
case 51:
 this.$ = Primitive.INT; 
break;
case 52:
 this.$ = Primitive.VARCHAR; 
break;
case 53:
 this.$ = Primitive.DOUBLE; 
break;
case 54:
 this.$ = Primitive.DATE; 
break;
case 55:
 this.$ = Primitive.BOOLEAN; 
break;
case 56:
 this.$ = Primitive.NULL; 
break;
case 57:
 $$[$0-4].envName = "if_env";$$[$0-2].envName = "else_env";this.$ = new If($$[$0-6], $$[$0-4], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column, "if_env"); 
break;
case 58:
 $$[$0-1].envName = "if_env";this.$ = new If($$[$0-4], $$[$0-1], undefined, _$[$0-5].first_line, _$[$0-5].first_column, "if_env"); 
break;
case 61:
 this.$ = new SimpleCase($$[$0-4], $$[$0-3], $$[$0-1], undefined,_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 62:
 this.$ = new SimpleCase($$[$0-6], $$[$0-5], $$[$0-3], $$[$0] ,_$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 63: case 67:
 $$[$0-4].push({when: $$[$0-2], then: $$[$0]}); this.$ = $$[$0-4]; 
break;
case 64:
 this.$ = [{when: $$[$0-2], then: $$[$0]}];
break;
case 65:
 this.$ = new SearchedCase($$[$0-3], $$[$0-1], undefined, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 66:
 this.$ = new SearchedCase($$[$0-5], $$[$0-3], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 68:
 this.$ = [{when: $$[$0-2], then: $$[$0]}]; 
break;
case 69:
 this.$ = new While($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 70:
 $$[$0-2].envName = "for_env";this.$ = new For($$[$0-9], $$[$0-2], $$[$0-7], $$[$0-4], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 71: case 86: case 87:
 this.$ = $$[$0-1]; 
break;
case 72:
 this.$ = new Function($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 73:
 this.$ = new Method($$[$0-5], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 74:
 this.$ = new Declaration($$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 75:
 this.$ = new Declaration([{id: $$[$0-3], type: $$[$0-2]}], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 76:
 this.$ = new SetVar($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 77:
 this.$ = new CodeBlock($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 78:
 this.$ = undefined; 
break;
case 85:
 this.$ = new CallVar($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 88:
 this.$ = new Relational($$[$0-2], RelationalOperator.EQ, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Relational($$[$0-2], RelationalOperator.GEQ, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Relational($$[$0-2], RelationalOperator.LEQ, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Relational($$[$0-2], RelationalOperator.GREATER, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Relational($$[$0-2], RelationalOperator.LESS, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Relational($$[$0-2], RelationalOperator.NEQ, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Logical($$[$0-2], LogicalOperator.AND, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Logical($$[$0-2], LogicalOperator.OR, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Logical(undefined, LogicalOperator.NOT, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new PrimitiveVar($$[$0], Primitive.INT , _$[$0].first_line, _$[$0].first_column); 
break;
case 98:
 this.$ = new PrimitiveVar($$[$0], Primitive.DOUBLE , _$[$0].first_line, _$[$0].first_column); 
break;
case 99:
 this.$ = new PrimitiveVar($$[$0], Primitive.DATE , _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 this.$ = new PrimitiveVar($$[$0], Primitive.VARCHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 101:
 this.$ = new PrimitiveVar($$[$0], Primitive.BOOLEAN , _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new PrimitiveVar($$[$0], Primitive.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 this.$ = new PrimitiveVar(null, Primitive.NULL, _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.PLUS, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 105:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.MINUS, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.DIV, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.MULT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.MOD, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 109:
 this.$ = new Arithmetic(undefined, ArithmeticOperator.UMINUS, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 110:
 this.$ = new CallFunc($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 112:
 this.$ = new Print($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class QCrypterLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QCrypter"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\s+)/i,
        /^(?:--.*)/i,
        /^(?:[/][*][^*]*[*]+(?:[^/*][^*]*[*]+)*[/])/i,
        /^(?:[ \r\t]+\n)/i,
        /^(?:CREATE\b)/i,
        /^(?:ALTER\b)/i,
        /^(?:DROP\b)/i,
        /^(?:RENAME\b)/i,
        /^(?:INSERT\b)/i,
        /^(?:UPDATE\b)/i,
        /^(?:TRUNCATE\b)/i,
        /^(?:DELETE\b)/i,
        /^(?:SELECT\b)/i,
        /^(?:FROM\b)/i,
        /^(?:WHERE\b)/i,
        /^(?:INTO\b)/i,
        /^(?:VALUES\b)/i,
        /^(?:ADD\b)/i,
        /^(?:COLUMN\b)/i,
        /^(?:RENAME\b)/i,
        /^(?:TO\b)/i,
        /^(?:TABLE\b)/i,
        /^(?:INT\b)/i,
        /^(?:DOUBLE\b)/i,
        /^(?:DATE\b)/i,
        /^(?:VARCHAR\b)/i,
        /^(?:BOOLEAN\b)/i,
        /^(?:TRUE\b)/i,
        /^(?:FALSE\b)/i,
        /^(?:NULL\b)/i,
        /^(?:NOT\b)/i,
        /^(?:AND\b)/i,
        /^(?:OR\b)/i,
        /^(?:BEGIN\b)/i,
        /^(?:END\b)/i,
        /^(?:DECLARE\b)/i,
        /^(?:DEFAULT\b)/i,
        /^(?:SET\b)/i,
        /^(?:AS\b)/i,
        /^(?:CAST\b)/i,
        /^(?:PRINT\b)/i,
        /^(?:IF\b)/i,
        /^(?:THEN\b)/i,
        /^(?:ELSE\b)/i,
        /^(?:CASE\b)/i,
        /^(?:WHEN\b)/i,
        /^(?:WHILE\b)/i,
        /^(?:FOR\b)/i,
        /^(?:IN\b)/i,
        /^(?:LOOP\b)/i,
        /^(?:BREAK\b)/i,
        /^(?:CONTINUE\b)/i,
        /^(?:FUNCTION\b)/i,
        /^(?:PROCEDURE\b)/i,
        /^(?:RETURNS\b)/i,
        /^(?:RETURN\b)/i,
        /^(?:\d{4}-\d{1,2}-\d{1,2})/i,
        /^(?:@_*[a-zA-Z\xf1\xd1][a-zA-Z0-9\xf1\xd1\_]*)/i,
        /^(?:[0-9]+\.[0-9]+\b)/i,
        /^(?:[0-9]+\b)/i,
        /^(?:_*[a-zA-Z\xf1\xd1][a-zA-Z0-9\xf1\xd1\_]*)/i,
        /^(?:["])/i,
        /^(?:[^"\\]+)/i,
        /^(?:\\")/i,
        /^(?:\\n)/i,
        /^(?:\\t)/i,
        /^(?:\\\\)/i,
        /^(?:\\\\')/i,
        /^(?:["])/i,
        /^(?:\()/i,
        /^(?:\))/i,
        /^(?:;)/i,
        /^(?:\.)/i,
        /^(?:,)/i,
        /^(?:\+)/i,
        /^(?:-)/i,
        /^(?:\*)/i,
        /^(?:\/)/i,
        /^(?:%)/i,
        /^(?:>=)/i,
        /^(?:<=)/i,
        /^(?:==)/i,
        /^(?:!=)/i,
        /^(?:>)/i,
        /^(?:<)/i,
        /^(?:=)/i,
        /^(?:$)/i,
        /^(?:.)/i
    ];
    conditions: any = {"string":{"rules":[62,63,64,65,66,67,68],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:// spaces ignored
      break;
    case 1:// comment inline
      break;
    case 2:// MultiLineComment
      break;
    case 3:return;
      break;
    case 4:return "RW_CREATE";
      break;
    case 5:return "RW_ALTER";
      break;
    case 6:return "RW_DROP";
      break;
    case 7:return "RW_RENAME";
      break;
    case 8:return "RW_INSERT";
      break;
    case 9:return "RW_UPDATE";
      break;
    case 10:return "RW_TRUNCATE";
      break;
    case 11:return "RW_DELETE";
      break;
    case 12:return "RW_SELECT";
      break;
    case 13:return "RW_FROM";
      break;
    case 14:return "RW_WHERE";
      break;
    case 15:return "RW_INTO";
      break;
    case 16:return "RW_VALUES";
      break;
    case 17:return "RW_ADD";
      break;
    case 18:return "RW_COLUMN";
      break;
    case 19:return "RW_RENAME";
      break;
    case 20:return "RW_TO";
      break;
    case 21:return "RW_TABLE";
      break;
    case 22:return "RW_INT";
      break;
    case 23:return "RW_DOUBLE";
      break;
    case 24:return "RW_DATE";
      break;
    case 25:return "RW_VARCHAR";
      break;
    case 26:return "RW_BOOLEAN";
      break;
    case 27:return "RW_TRUE";
      break;
    case 28:return "RW_FALSE";
      break;
    case 29:return "RW_NULL";
      break;
    case 30:return "RW_NOT"; 
      break;
    case 31:return "RW_AND";
      break;
    case 32:return "RW_OR";
      break;
    case 33:return "RW_BEGIN";
      break;
    case 34:return "RW_END";
      break;
    case 35:return "RW_DECLARE";
      break;
    case 36:return "RW_DEFAULT";
      break;
    case 37:return "RW_SET";
      break;
    case 38:return "RW_AS";
      break;
    case 39:return "RW_CAST";
      break;
    case 40:return "RW_PRINT";
      break;
    case 41:return "RW_IF";
      break;
    case 42:return "RW_THEN";
      break;
    case 43:return "RW_ELSE";
      break;
    case 44:return "RW_CASE";
      break;
    case 45:return "RW_WHEN";
      break;
    case 46:return "RW_WHILE";
      break;
    case 47:return "RW_FOR";
      break;
    case 48:return "RW_IN";
      break;
    case 49:return "RW_LOOP";
      break;
    case 50:return "RW_BREAK";
      break;
    case 51:return "RW_CONTINUE";
      break;
    case 52:return "RW_FUNCTION";
      break;
    case 53:return "RW_PROCEDURE";
      break;
    case 54:return "RW_RETURNS";
      break;
    case 55:return "RW_RETURN";
      break;
    case 56:return "TK_DATE";
      break;
    case 57:return "TK_VAR";
      break;
    case 58:return "TK_DOUBLE";
      break;
    case 59:return "TK_INT";
      break;
    case 60:return "TK_ID";
      break;
    case 61:controlString=""; this.pushState("string");
      break;
    case 62:controlString+=yy_.yytext; 
      break;
    case 63:controlString+="\"";
      break;
    case 64:controlString+="\n";
      break;
    case 65:controlString+="\t";
      break;
    case 66:controlString+="\\";
      break;
    case 67:controlString+="\'";
      break;
    case 68:yy_.yytext=controlString; this.popState(); return 107;
      break;
    case 69:return "TK_LPAR";
      break;
    case 70:return "TK_RPAR";
      break;
    case 71:return "TK_SCOLON";
      break;
    case 72:return "TK_DOT";
      break;
    case 73:return "TK_COMA";
      break;
    case 74:return "TK_PLUS";
      break;
    case 75:return "TK_MINUS";
      break;
    case 76:return "TK_STAR";
      break;
    case 77:return "TK_DIV";
      break;
    case 78:return "TK_MOD";
      break;
    case 79:return "TK_GEQ";
      break;
    case 80:return "TK_LEQ";
      break;
    case 81:return "TK_EQEQ";
      break;
    case 82:return "TK_NOTEQ";
      break;
    case 83:return "TK_GREATER";
      break;
    case 84:return "TK_LESS";
      break;
    case 85:return "TK_EQ";
      break;
    case 86:return 5;
      break;
    case 87: lexErrors.push(new LexError(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext)); return "INVALID"; 
      break;
        }
    }
}


