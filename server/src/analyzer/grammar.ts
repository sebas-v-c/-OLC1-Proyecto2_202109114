import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

    // files to import should be the js files
    /*
    import { LexError, SynError } from "./errors.js" 
    */
    // use this import while testing
    const { LexError, SynError } = require("./errors");

    let ast = [];
    let errors = [];
    let lexErrors = [];
    let synErrors = [];
    const clean_errors = () => {
        errors = [];
    }
    let controlString = "";


    // files to import should be the js files
    /*
    import { LexError, SynError } from "./errors.js" 
    */
    // use this import while testing
    const { Declaration } = require("./instructions/declaration");
    const { SetVar } = require("./instructions/setVar");
    const { If } = require("./instructions/if");
    const { SimpleCase, SearchedCase } = require("./instructions/case");
    const { Function, Method } = require("./instructions/function");
    const { For } = require("./instructions/for");
    const { Continue } = require("./instructions/continue");
    const { Break } = require("./instructions/break");
    const { Return } = require("./instructions/return");
    const { While } = require("./instructions/while");
    const { Print } = require("./instructions/print");
    const { CodeBlock } = require("./instructions/codeBlock");

    const { Create } = require("./instructions/ddl/create");
    const { Alter, AlterActions } = require("./instructions/ddl/alter");
    const { Drop } = require("./instructions/ddl/drop");

    const { Insert } = require("./instructions/dml/insert");
    const { Truncate } = require("./instructions/dml/truncate");
    const { Update } = require("./instructions/dml/update");
    const { WherePredicate } = require("./instructions/dml/wherePredicate");

    const { Primitive, RelationalOperator, ArithmeticOperator, LogicalOperator } = require("./tools/types");
    const { PrimitiveVar } = require("./expressions/primitive");
    const { IdVar } = require("./expressions/id");
    const { Logical } = require("./expressions/logical");
    const { Relational } = require("./expressions/relational");
    const { Arithmetic } = require("./expressions/arithmetic");
    const { CallVar } = require("./expressions/callVar");
    const { CallFunc } = require("./expressions/callFunc");

export class QCrypterParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"TK_SCOLON":7,"ddl":8,"dml":9,"if_struct":10,"case_struct":11,"while_struct":12,"for_struct":13,"RW_BREAK":14,"RW_CONTINUE":15,"RW_RETURN":16,"expression":17,"call_func_mth":18,"declare_function":19,"declare_method":20,"declare_var":21,"set_var":22,"encapsulated":23,"cast":24,"print":25,"RW_CREATE":26,"RW_TABLE":27,"TK_ID":28,"TK_LPAR":29,"typed_arguments":30,"TK_RPAR":31,"RW_ALTER":32,"alter_actions":33,"RW_DROP":34,"RW_INSERT":35,"RW_INTO":36,"arguments":37,"RW_VALUES":38,"value_arguments":39,"select_stmt":40,"RW_UPDATE":41,"RW_SET":42,"set_arguments":43,"RW_WHERE":44,"where_cond":45,"RW_TRUNCATE":46,"RW_DELETE":47,"RW_FROM":48,"RW_ADD":49,"type":50,"RW_COLUMN":51,"RW_RENAME":52,"RW_TO":53,"RW_SELECT":54,"select_arguments":55,"FROM":56,"AS":57,"TK_STAR":58,"TK_COMA":59,"TK_EQ":60,"typed_var_arguments":61,"TK_VAR":62,"RW_INT":63,"RW_VARCHAR":64,"RW_DOUBLE":65,"RW_DATE":66,"RW_BOOLEAN":67,"RW_NULL":68,"RW_IF":69,"RW_THEN":70,"env":71,"RW_ELSE":72,"RW_END":73,"RW_BEGIN":74,"searched_case":75,"simple_case":76,"RW_CASE":77,"simple_case_cases":78,"primitive":79,"RW_AS":80,"RW_WHEN":81,"searched_case_cases":82,"RW_WHILE":83,"RW_FOR":84,"RW_IN":85,"TK_INT":86,"TK_DOT":87,"RW_LOOP":88,"END":89,"RW_FUNCTION":90,"RW_RETURNS":91,"RW_PROCEDURE":92,"RW_DECLARE":93,"RW_DEFAULT":94,"logic":95,"relational":96,"arithmetic":97,"TK_GEQ":98,"TK_LEQ":99,"TK_GREATER":100,"TK_LESS":101,"TK_NOTEQ":102,"RW_AND":103,"RW_OR":104,"RW_NOT":105,"TK_DOUBLE":106,"TK_DATE":107,"TK_VARCHAR":108,"RW_TRUE":109,"RW_FALSE":110,"TK_PLUS":111,"TK_MINUS":112,"TK_DIV":113,"TK_MOD":114,"RW_CAST":115,"RW_PRINT":116,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",7:"TK_SCOLON",14:"RW_BREAK",15:"RW_CONTINUE",16:"RW_RETURN",26:"RW_CREATE",27:"RW_TABLE",28:"TK_ID",29:"TK_LPAR",31:"TK_RPAR",32:"RW_ALTER",34:"RW_DROP",35:"RW_INSERT",36:"RW_INTO",38:"RW_VALUES",41:"RW_UPDATE",42:"RW_SET",44:"RW_WHERE",46:"RW_TRUNCATE",47:"RW_DELETE",48:"RW_FROM",49:"RW_ADD",51:"RW_COLUMN",52:"RW_RENAME",53:"RW_TO",54:"RW_SELECT",56:"FROM",57:"AS",58:"TK_STAR",59:"TK_COMA",60:"TK_EQ",62:"TK_VAR",63:"RW_INT",64:"RW_VARCHAR",65:"RW_DOUBLE",66:"RW_DATE",67:"RW_BOOLEAN",68:"RW_NULL",69:"RW_IF",70:"RW_THEN",72:"RW_ELSE",73:"RW_END",74:"RW_BEGIN",77:"RW_CASE",80:"RW_AS",81:"RW_WHEN",83:"RW_WHILE",84:"RW_FOR",85:"RW_IN",86:"TK_INT",87:"TK_DOT",88:"RW_LOOP",89:"END",90:"RW_FUNCTION",91:"RW_RETURNS",92:"RW_PROCEDURE",93:"RW_DECLARE",94:"RW_DEFAULT",98:"TK_GEQ",99:"TK_LEQ",100:"TK_GREATER",101:"TK_LESS",102:"TK_NOTEQ",103:"RW_AND",104:"RW_OR",105:"RW_NOT",106:"TK_DOUBLE",107:"TK_DATE",108:"TK_VARCHAR",109:"RW_TRUE",110:"RW_FALSE",111:"TK_PLUS",112:"TK_MINUS",113:"TK_DIV",114:"TK_MOD",115:"RW_CAST",116:"RW_PRINT"};
    productions_: ProductionsType = [0,[3,2],[3,1],[4,3],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,6],[8,4],[8,3],[9,10],[9,1],[9,6],[9,3],[9,5],[33,3],[33,3],[33,3],[33,5],[40,4],[40,6],[40,4],[40,2],[45,1],[55,1],[55,1],[43,5],[43,3],[39,3],[39,1],[37,3],[37,1],[30,4],[30,2],[61,4],[61,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[10,8],[10,6],[11,1],[11,1],[76,6],[76,8],[78,5],[78,4],[75,5],[75,7],[82,5],[82,4],[12,5],[13,11],[23,3],[19,11],[20,8],[21,2],[21,5],[22,4],[71,1],[71,0],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[17,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[95,3],[95,3],[95,2],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[97,3],[97,3],[97,3],[97,3],[97,3],[97,2],[18,4],[24,6],[25,2]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {3:[2,2],5:[2,5],6:[2,6],7:[2,7],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],14:[2,15],15:[2,16],16:[2,17],17:[2,18],18:[2,19],19:[2,20],20:[2,21],21:[2,22],26:[2,27],31:[2,60],32:[2,61],43:[2,1],87:[2,40],114:[2,25],117:[2,29],133:[2,72],162:[2,24],205:[2,70],217:[2,23],222:[2,31],223:[2,32],224:[2,33],228:[2,28],233:[2,59],251:[2,67],256:[2,74],257:[2,34],260:[2,58],262:[2,63],267:[2,26],269:[2,73],270:[2,71]};

    constructor (yy = {}, lexer = new QCrypterLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,11],$V1=[1,12],$V2=[1,13],$V3=[1,22],$V4=[1,35],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,27],$V9=[1,37],$Va=[1,28],$Vb=[1,29],$Vc=[1,41],$Vd=[1,30],$Ve=[1,38],$Vf=[1,42],$Vg=[1,33],$Vh=[1,34],$Vi=[1,36],$Vj=[1,39],$Vk=[1,40],$Vl=[1,54],$Vm=[1,55],$Vn=[1,53],$Vo=[1,63],$Vp=[1,57],$Vq=[1,56],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,64],$Vx=[1,77],$Vy=[2,79],$Vz=[5,14,15,16,26,28,32,34,35,41,42,46,47,54,69,72,73,74,77,83,84,89,93,115,116],$VA=[1,104],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,93],$VI=[1,94],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,105],$VN=[7,31,44,56,57,58,59,60,70,74,80,81,98,99,100,101,102,103,104,111,112,113,114],$VO=[7,31,44,56,57,58,59,60,70,72,73,74,80,81,98,99,100,101,102,103,104,111,112,113,114],$VP=[1,124],$VQ=[1,126],$VR=[1,127],$VS=[1,128],$VT=[1,129],$VU=[1,130],$VV=[1,131],$VW=[1,133],$VX=[7,31],$VY=[2,45],$VZ=[1,137],$V_=[7,31,44,56,57,59,70,74,80,81,103,104],$V$=[1,161],$V01=[31,59],$V11=[2,51],$V21=[7,31,59,74,80,94],$V31=[7,31,44,56,57,59,60,70,74,80,81,102,103,104],$V41=[7,31,44,56,57,59,60,70,74,80,81,98,99,100,101,102,103,104],$V51=[7,31,44,56,57,59,60,70,74,80,81,98,99,100,101,102,103,104,111,112],$V61=[72,81],$V71=[44,59];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:2,5:[1,3],6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,74:$Ve,75:31,76:32,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk},{1:[3]},{5:[1,43],6:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,74:$Ve,75:31,76:32,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk},{1:[2,2]},{7:[1,45]},{7:[2,5]},{7:[2,6]},{7:[2,7]},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,14],17:46,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{7:[2,15]},{7:[2,16]},{7:[2,17]},{7:[2,18]},{7:[2,19]},{7:[2,20]},{7:[2,21]},{7:[2,22]},{27:[1,65],90:[1,66],92:[1,67]},{27:[1,68]},{27:[1,69]},{36:[1,70]},{7:[2,27]},{28:[1,71]},{27:[1,72]},{48:[1,73]},{17:74,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{7:[2,60]},{7:[2,61]},{17:75,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{62:[1,76]},{29:$Vx},{61:78,62:[1,79]},{62:[1,80]},{4:82,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,71:81,74:$Ve,75:31,76:32,77:$Vf,83:$Vg,84:$Vh,89:$Vy,93:$Vi,115:$Vj,116:$Vk},{29:[1,83]},{17:84,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:86,18:51,24:52,28:$Vl,29:$Vm,39:88,55:85,58:[1,87],62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:90,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,81:[1,91],82:89,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{1:[2,1]},{7:[1,92]},o($Vz,[2,4]),{7:[2,13],58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},o($VN,[2,80]),o($VN,[2,81]),o($VN,[2,82]),o($VN,[2,83]),o($VN,[2,84]),o($VN,[2,85]),o($VN,[2,86]),o($VN,[2,87],{29:$Vx}),{17:106,18:51,24:52,28:$Vl,29:$Vm,40:107,54:$Vc,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:108,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},o($VO,[2,99]),o($VO,[2,100]),o($VO,[2,101]),o($VO,[2,102]),o($VO,[2,103]),o($VO,[2,104]),o($VO,[2,105]),{17:109,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{28:[1,110]},{28:[1,111]},{28:[1,112]},{28:[1,113]},{28:[1,114]},{28:[1,115]},{42:[1,116]},{28:[1,117]},{28:[1,118]},{58:$VA,60:$VB,70:[1,119],98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{58:$VA,60:$VB,74:[1,120],98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{85:[1,121]},{17:123,18:51,24:52,28:$Vl,29:$Vm,39:122,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{7:[2,75],59:$VP},{50:125,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV},{60:[1,132]},{89:$VW},o([72,73,89],[2,78],{8:5,9:6,10:7,11:8,12:9,13:10,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,40:26,75:31,76:32,6:44,14:$V0,15:$V1,16:$V2,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,74:$Ve,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk}),{17:134,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{7:[2,114],58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{56:[1,135]},o($VX,[2,38],{56:$VY,59:$VY,57:[1,136],58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),{56:[2,40]},{56:[2,41],59:$VZ},{72:[1,138],81:[1,139]},{58:$VA,60:$VB,78:140,81:[1,141],98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{17:142,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},o($Vz,[2,3]),{17:143,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:144,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:145,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:146,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:147,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:148,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:149,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:150,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:151,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:152,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:153,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:154,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{17:155,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{31:[1,156],58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{31:[1,157]},o($V_,[2,98],{58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,111:$VJ,112:$VK,113:$VL,114:$VM}),o($VN,[2,111]),{29:[1,158]},{29:[1,159]},{61:160,62:$V$},{33:162,34:[1,164],49:[1,163],52:[1,165]},{7:[2,25]},{29:[1,166]},{28:[1,168],43:167},{7:[2,29]},{44:[1,169]},{4:82,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,71:170,72:$Vy,74:[1,171],75:31,76:32,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk},{4:82,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,71:172,73:$Vy,74:$Ve,75:31,76:32,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk},{86:[1,173]},{31:[1,174],59:$VZ},o($V01,$VY,{58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),{62:[1,175]},o([7,59],$V11,{94:[1,176]}),o($V21,[2,52]),o($V21,[2,53]),o($V21,[2,54]),o($V21,[2,55]),o($V21,[2,56]),o($V21,[2,57]),{17:177,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{7:[2,72]},{58:$VA,60:$VB,80:[1,178],98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{28:[1,179]},{28:[1,180]},{17:181,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{68:$Vo,79:182,86:$Vp,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{17:183,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{72:[1,184],81:[1,185]},{68:$Vo,79:186,86:$Vp,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{58:$VA,60:$VB,70:[1,187],98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},o($V_,[2,96],{58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,111:$VJ,112:$VK,113:$VL,114:$VM}),o([7,31,44,56,57,59,70,74,80,81,104],[2,97],{58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,111:$VJ,112:$VK,113:$VL,114:$VM}),o($V31,[2,90],{58:$VA,98:$VC,99:$VD,100:$VE,101:$VF,111:$VJ,112:$VK,113:$VL,114:$VM}),o($V41,[2,91],{58:$VA,111:$VJ,112:$VK,113:$VL,114:$VM}),o($V41,[2,92],{58:$VA,111:$VJ,112:$VK,113:$VL,114:$VM}),o($V41,[2,93],{58:$VA,111:$VJ,112:$VK,113:$VL,114:$VM}),o($V41,[2,94],{58:$VA,111:$VJ,112:$VK,113:$VL,114:$VM}),o($V31,[2,95],{58:$VA,98:$VC,99:$VD,100:$VE,101:$VF,111:$VJ,112:$VK,113:$VL,114:$VM}),o($V51,[2,106],{58:$VA,113:$VL,114:$VM}),o($V51,[2,107],{58:$VA,113:$VL,114:$VM}),o($VN,[2,108]),o($VN,[2,109]),o($VN,[2,110]),o($VN,[2,88]),o($VN,[2,89]),{28:[1,189],30:188},{61:190,62:$V$},{59:$VP,80:[1,191]},{50:192,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV},{7:[2,24]},{28:[1,193]},{51:[1,194]},{51:[1,196],53:[1,195]},{28:[1,198],37:197},{44:[1,199],59:[1,200]},{60:[1,201]},{17:202,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{72:[1,203]},o([73,89],$Vy,{6:4,8:5,9:6,10:7,11:8,12:9,13:10,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,40:26,75:31,76:32,4:82,71:204,14:$V0,15:$V1,16:$V2,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,74:$Ve,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk}),{73:[1,205]},{87:[1,206]},o($VN,[2,112]),{50:207,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV},{17:208,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{7:[2,77],58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{50:209,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV},o($VX,[2,35],{44:[1,210]}),o($VX,[2,37]),o([31,56,59],[2,44],{58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),{73:[1,211]},{58:$VA,60:$VB,70:[1,212],98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{68:$Vo,79:213,86:$Vp,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{68:$Vo,79:214,86:$Vp,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{70:[1,215]},{68:$Vo,79:216,86:$Vp,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{31:[1,217],59:[1,218]},{50:219,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV},{31:[1,220],59:$VP},{74:[1,221]},o([31,59,80],$V11),{50:222,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV},{28:[1,223]},{28:[1,224]},{28:[1,225]},{31:[1,226],59:[1,227]},o($V01,[2,47]),{17:229,18:51,24:52,28:$Vl,29:$Vm,45:228,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{28:[1,230]},{17:231,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{7:[2,30],58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{4:82,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,71:232,73:$Vy,74:$Ve,75:31,76:32,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk},{73:[1,233],89:$VW},{7:[2,70]},{87:[1,234]},o([7,31,59,80],[2,50]),{7:[2,76],58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{31:[1,235]},{17:236,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{7:[2,66],80:[1,237]},{68:$Vo,79:238,86:$Vp,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{73:[1,239]},{70:[1,240]},{68:$Vo,79:241,86:$Vp,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($V61,[2,69]),{7:[2,23]},{28:[1,242]},o($V01,[2,49]),{91:[1,243]},{4:82,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,71:244,73:$Vy,74:$Ve,75:31,76:32,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk},{7:[2,31]},{7:[2,32]},{7:[2,33]},{53:[1,245]},{38:[1,246]},{28:[1,247]},{7:[2,28]},{7:[2,39],58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM},{60:[1,248]},o($V71,[2,43],{58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),{73:[1,249]},{7:[2,59]},{86:[1,250]},o($VN,[2,113]),o($VX,[2,36],{58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),{62:[1,251]},o($V61,[2,68]),{7:[2,62],80:[1,252]},{68:$Vo,79:253,86:$Vp,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($V61,[2,65]),{50:254,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV},{50:255,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV},{73:[1,256]},{28:[1,257]},{29:[1,258]},o($V01,[2,46]),{17:259,18:51,24:52,28:$Vl,29:$Vm,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},{69:[1,260]},{74:[1,261]},{7:[2,67]},{62:[1,262]},o($V61,[2,64]),o($V01,[2,48]),{74:[1,263]},{7:[2,74]},{7:[2,34]},{17:123,18:51,24:52,28:$Vl,29:$Vm,39:264,62:$Vn,68:$Vo,79:49,86:$Vp,95:47,96:48,97:50,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:$Vw,115:$Vj},o($V71,[2,42],{58:$VA,60:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),{7:[2,58]},{4:82,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,71:265,73:$Vy,74:$Ve,75:31,76:32,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk},{7:[2,63]},{4:82,6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V3,28:$V4,32:$V5,34:$V6,35:$V7,40:26,41:$V8,42:$V9,46:$Va,47:$Vb,54:$Vc,69:$Vd,71:266,73:$Vy,74:$Ve,75:31,76:32,77:$Vf,83:$Vg,84:$Vh,93:$Vi,115:$Vj,116:$Vk},{31:[1,267],59:$VZ},{73:[1,268]},{73:[1,269]},{7:[2,26]},{88:[1,270]},{7:[2,73]},{7:[2,71]}];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return null 
break;
case 3:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 4:
 this.$ = [$$[$0-1]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 27: case 60: case 61: case 80: case 81: case 82: case 83: case 84: case 85:
 this.$ = $$[$0]; 
break;
case 11:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 12:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 13:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 14:
 this.$ = new Return(undefined, _$[$0].first_line, _$[$0].first_column); 
break;
case 23:
 this.$ = new Create($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 24:
 this.$ = new Alter($$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 25:
 this.$ = new Drop($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 26:
 this.$ = new Insert($$[$0-7], $$[$0-5], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 28:
 this.$ = new Update($$[$0-4], $$[$0-2], $$[$0] ,_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 29:
 this.$ = new Truncate($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 30:
  
break;
case 31:
 this.$ = {type: AlterActions.ADD, col: $$[$0-1], colType: $$[$0]}; 
break;
case 32:
 this.$ = {type: AlterActions.DROP, col: $$[$0]}; 
break;
case 33:
 this.$ = {type: AlterActions.RENAMETABLE, newId: $$[$0]}; 
break;
case 34:
 this.$ = {type: AlterActions.RENAMECOL, col: $$[$0-2], newId: $$[$0]}; 
break;
case 39:
 this.$ = new WherePredicate($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 42:
 $$[$0-4].push({col: $$[$0-2], val: $$[$0]}); this.$ = $$[$0-4]; 
break;
case 43:
 this.$ = [{col: $$[$0-2], val: $$[$0-1]}]; 
break;
case 44: case 46:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 45: case 47:
 this.$ = [$$[$0]]; 
break;
case 48: case 50:
 $$[$0-3].push({id: $$[$0-1], type: $$[$0]}); this.$ = $$[$0-3]; 
break;
case 49:
 this.$ = [{id: $$[$0-1], type: $$[$0]}]; 
break;
case 51:
 this.$ = [{id: $$[$0-1], type: $$[$0]}];
break;
case 52:
 this.$ = Primitive.INT; 
break;
case 53:
 this.$ = Primitive.VARCHAR; 
break;
case 54:
 this.$ = Primitive.DOUBLE; 
break;
case 55:
 this.$ = Primitive.DATE; 
break;
case 56:
 this.$ = Primitive.BOOLEAN; 
break;
case 57:
 this.$ = Primitive.NULL; 
break;
case 58:
 $$[$0-4].envName = "if_env";$$[$0-2].envName = "else_env";this.$ = new If($$[$0-6], $$[$0-4], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column, "if_env"); 
break;
case 59:
 $$[$0-1].envName = "if_env";this.$ = new If($$[$0-4], $$[$0-1], undefined, _$[$0-5].first_line, _$[$0-5].first_column, "if_env"); 
break;
case 62:
 this.$ = new SimpleCase($$[$0-4], $$[$0-3], $$[$0-1], undefined,_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 63:
 this.$ = new SimpleCase($$[$0-6], $$[$0-5], $$[$0-3], $$[$0] ,_$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 64: case 68:
 $$[$0-4].push({when: $$[$0-2], then: $$[$0]}); this.$ = $$[$0-4]; 
break;
case 65:
 this.$ = [{when: $$[$0-2], then: $$[$0]}];
break;
case 66:
 this.$ = new SearchedCase($$[$0-3], $$[$0-1], undefined, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 67:
 this.$ = new SearchedCase($$[$0-5], $$[$0-3], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 69:
 this.$ = [{when: $$[$0-2], then: $$[$0]}]; 
break;
case 70:
 this.$ = new While($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 71:
 $$[$0-2].envName = "for_env";this.$ = new For($$[$0-9], $$[$0-2], $$[$0-7], $$[$0-4], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 72: case 88: case 89:
 this.$ = $$[$0-1]; 
break;
case 73:
 this.$ = new Function($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 74:
 this.$ = new Method($$[$0-5], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 75:
 this.$ = new Declaration($$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 76:
 this.$ = new Declaration([{id: $$[$0-3], type: $$[$0-2]}], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 77:
 this.$ = new SetVar($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 78:
 this.$ = new CodeBlock($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 79:
 this.$ = undefined; 
break;
case 86:
 this.$ = new CallVar($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 87:
 this.$ = new IdVar($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 90:
 this.$ = new Relational($$[$0-2], RelationalOperator.EQ, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Relational($$[$0-2], RelationalOperator.GEQ, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Relational($$[$0-2], RelationalOperator.LEQ, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Relational($$[$0-2], RelationalOperator.GREATER, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Relational($$[$0-2], RelationalOperator.LESS, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Relational($$[$0-2], RelationalOperator.NEQ, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Logical($$[$0-2], LogicalOperator.AND, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 97:
 this.$ = new Logical($$[$0-2], LogicalOperator.OR, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
 this.$ = new Logical(undefined, LogicalOperator.NOT, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 99:
 this.$ = new PrimitiveVar($$[$0], Primitive.INT , _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 this.$ = new PrimitiveVar($$[$0], Primitive.DOUBLE , _$[$0].first_line, _$[$0].first_column); 
break;
case 101:
 this.$ = new PrimitiveVar($$[$0], Primitive.DATE , _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new PrimitiveVar($$[$0], Primitive.VARCHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 this.$ = new PrimitiveVar($$[$0], Primitive.BOOLEAN , _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 this.$ = new PrimitiveVar($$[$0], Primitive.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 105:
 this.$ = new PrimitiveVar(null, Primitive.NULL, _$[$0].first_line, _$[$0].first_column); 
break;
case 106:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.PLUS, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.MINUS, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.DIV, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 109:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.MULT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 110:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOperator.MOD, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 111:
 this.$ = new Arithmetic(undefined, ArithmeticOperator.UMINUS, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 112:
 this.$ = new CallFunc($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 114:
 this.$ = new Print($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class QCrypterLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QCrypter"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\s+)/i,
        /^(?:--.*)/i,
        /^(?:[/][*][^*]*[*]+(?:[^/*][^*]*[*]+)*[/])/i,
        /^(?:[ \r\t]+\n)/i,
        /^(?:CREATE\b)/i,
        /^(?:ALTER\b)/i,
        /^(?:DROP\b)/i,
        /^(?:RENAME\b)/i,
        /^(?:INSERT\b)/i,
        /^(?:UPDATE\b)/i,
        /^(?:TRUNCATE\b)/i,
        /^(?:DELETE\b)/i,
        /^(?:SELECT\b)/i,
        /^(?:FROM\b)/i,
        /^(?:WHERE\b)/i,
        /^(?:INTO\b)/i,
        /^(?:VALUES\b)/i,
        /^(?:ADD\b)/i,
        /^(?:COLUMN\b)/i,
        /^(?:RENAME\b)/i,
        /^(?:TO\b)/i,
        /^(?:TABLE\b)/i,
        /^(?:INT\b)/i,
        /^(?:DOUBLE\b)/i,
        /^(?:DATE\b)/i,
        /^(?:VARCHAR\b)/i,
        /^(?:BOOLEAN\b)/i,
        /^(?:TRUE\b)/i,
        /^(?:FALSE\b)/i,
        /^(?:NULL\b)/i,
        /^(?:NOT\b)/i,
        /^(?:AND\b)/i,
        /^(?:OR\b)/i,
        /^(?:BEGIN\b)/i,
        /^(?:END\b)/i,
        /^(?:DECLARE\b)/i,
        /^(?:DEFAULT\b)/i,
        /^(?:SET\b)/i,
        /^(?:AS\b)/i,
        /^(?:CAST\b)/i,
        /^(?:PRINT\b)/i,
        /^(?:IF\b)/i,
        /^(?:THEN\b)/i,
        /^(?:ELSE\b)/i,
        /^(?:CASE\b)/i,
        /^(?:WHEN\b)/i,
        /^(?:WHILE\b)/i,
        /^(?:FOR\b)/i,
        /^(?:IN\b)/i,
        /^(?:LOOP\b)/i,
        /^(?:BREAK\b)/i,
        /^(?:CONTINUE\b)/i,
        /^(?:FUNCTION\b)/i,
        /^(?:PROCEDURE\b)/i,
        /^(?:RETURNS\b)/i,
        /^(?:RETURN\b)/i,
        /^(?:\d{4}-\d{1,2}-\d{1,2})/i,
        /^(?:@_*[a-zA-Z\xf1\xd1][a-zA-Z0-9\xf1\xd1\_]*)/i,
        /^(?:[0-9]+\.[0-9]+\b)/i,
        /^(?:[0-9]+\b)/i,
        /^(?:_*[a-zA-Z\xf1\xd1][a-zA-Z0-9\xf1\xd1\_]*)/i,
        /^(?:["])/i,
        /^(?:[^"\\]+)/i,
        /^(?:\\")/i,
        /^(?:\\n)/i,
        /^(?:\\t)/i,
        /^(?:\\\\)/i,
        /^(?:\\\\')/i,
        /^(?:["])/i,
        /^(?:\()/i,
        /^(?:\))/i,
        /^(?:;)/i,
        /^(?:\.)/i,
        /^(?:,)/i,
        /^(?:\+)/i,
        /^(?:-)/i,
        /^(?:\*)/i,
        /^(?:\/)/i,
        /^(?:%)/i,
        /^(?:>=)/i,
        /^(?:<=)/i,
        /^(?:==)/i,
        /^(?:!=)/i,
        /^(?:>)/i,
        /^(?:<)/i,
        /^(?:=)/i,
        /^(?:$)/i,
        /^(?:.)/i
    ];
    conditions: any = {"string":{"rules":[62,63,64,65,66,67,68],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:// spaces ignored
      break;
    case 1:// comment inline
      break;
    case 2:// MultiLineComment
      break;
    case 3:return;
      break;
    case 4:return "RW_CREATE";
      break;
    case 5:return "RW_ALTER";
      break;
    case 6:return "RW_DROP";
      break;
    case 7:return "RW_RENAME";
      break;
    case 8:return "RW_INSERT";
      break;
    case 9:return "RW_UPDATE";
      break;
    case 10:return "RW_TRUNCATE";
      break;
    case 11:return "RW_DELETE";
      break;
    case 12:return "RW_SELECT";
      break;
    case 13:return "RW_FROM";
      break;
    case 14:return "RW_WHERE";
      break;
    case 15:return "RW_INTO";
      break;
    case 16:return "RW_VALUES";
      break;
    case 17:return "RW_ADD";
      break;
    case 18:return "RW_COLUMN";
      break;
    case 19:return "RW_RENAME";
      break;
    case 20:return "RW_TO";
      break;
    case 21:return "RW_TABLE";
      break;
    case 22:return "RW_INT";
      break;
    case 23:return "RW_DOUBLE";
      break;
    case 24:return "RW_DATE";
      break;
    case 25:return "RW_VARCHAR";
      break;
    case 26:return "RW_BOOLEAN";
      break;
    case 27:return "RW_TRUE";
      break;
    case 28:return "RW_FALSE";
      break;
    case 29:return "RW_NULL";
      break;
    case 30:return "RW_NOT"; 
      break;
    case 31:return "RW_AND";
      break;
    case 32:return "RW_OR";
      break;
    case 33:return "RW_BEGIN";
      break;
    case 34:return "RW_END";
      break;
    case 35:return "RW_DECLARE";
      break;
    case 36:return "RW_DEFAULT";
      break;
    case 37:return "RW_SET";
      break;
    case 38:return "RW_AS";
      break;
    case 39:return "RW_CAST";
      break;
    case 40:return "RW_PRINT";
      break;
    case 41:return "RW_IF";
      break;
    case 42:return "RW_THEN";
      break;
    case 43:return "RW_ELSE";
      break;
    case 44:return "RW_CASE";
      break;
    case 45:return "RW_WHEN";
      break;
    case 46:return "RW_WHILE";
      break;
    case 47:return "RW_FOR";
      break;
    case 48:return "RW_IN";
      break;
    case 49:return "RW_LOOP";
      break;
    case 50:return "RW_BREAK";
      break;
    case 51:return "RW_CONTINUE";
      break;
    case 52:return "RW_FUNCTION";
      break;
    case 53:return "RW_PROCEDURE";
      break;
    case 54:return "RW_RETURNS";
      break;
    case 55:return "RW_RETURN";
      break;
    case 56:return "TK_DATE";
      break;
    case 57:return "TK_VAR";
      break;
    case 58:return "TK_DOUBLE";
      break;
    case 59:return "TK_INT";
      break;
    case 60:return "TK_ID";
      break;
    case 61:controlString=""; this.pushState("string");
      break;
    case 62:controlString+=yy_.yytext; 
      break;
    case 63:controlString+="\"";
      break;
    case 64:controlString+="\n";
      break;
    case 65:controlString+="\t";
      break;
    case 66:controlString+="\\";
      break;
    case 67:controlString+="\'";
      break;
    case 68:yy_.yytext=controlString; this.popState(); return 108;
      break;
    case 69:return "TK_LPAR";
      break;
    case 70:return "TK_RPAR";
      break;
    case 71:return "TK_SCOLON";
      break;
    case 72:return "TK_DOT";
      break;
    case 73:return "TK_COMA";
      break;
    case 74:return "TK_PLUS";
      break;
    case 75:return "TK_MINUS";
      break;
    case 76:return "TK_STAR";
      break;
    case 77:return "TK_DIV";
      break;
    case 78:return "TK_MOD";
      break;
    case 79:return "TK_GEQ";
      break;
    case 80:return "TK_LEQ";
      break;
    case 81:return "TK_EQEQ";
      break;
    case 82:return "TK_NOTEQ";
      break;
    case 83:return "TK_GREATER";
      break;
    case 84:return "TK_LESS";
      break;
    case 85:return "TK_EQ";
      break;
    case 86:return 5;
      break;
    case 87: lexErrors.push(new LexError(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext)); return "INVALID"; 
      break;
        }
    }
}


